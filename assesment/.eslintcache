[{"H:\\ANKIT_ASSESSMENT\\assesment\\src\\index.js":"1","H:\\ANKIT_ASSESSMENT\\assesment\\src\\theme.js":"2","H:\\ANKIT_ASSESSMENT\\assesment\\src\\App.js":"3","H:\\ANKIT_ASSESSMENT\\assesment\\src\\style.js":"4","H:\\ANKIT_ASSESSMENT\\assesment\\src\\components\\Table.js":"5","H:\\ANKIT_ASSESSMENT\\assesment\\src\\views\\LoginView.js":"6","H:\\ANKIT_ASSESSMENT\\assesment\\src\\views\\DashboardView.js":"7","H:\\ANKIT_ASSESSMENT\\assesment\\src\\views\\InventoryView.js":"8","H:\\ANKIT_ASSESSMENT\\assesment\\src\\views\\CustomersView.js":"9","H:\\ANKIT_ASSESSMENT\\assesment\\src\\views\\TransactionsView.js":"10","H:\\ANKIT_ASSESSMENT\\assesment\\src\\views\\ReportsView.js":"11","H:\\ANKIT_ASSESSMENT\\assesment\\src\\layouts\\DashboardLayout.js":"12","H:\\ANKIT_ASSESSMENT\\assesment\\src\\routes.js":"13","H:\\ANKIT_ASSESSMENT\\assesment\\src\\layouts\\MainLayout.js":"14","H:\\ANKIT_ASSESSMENT\\assesment\\src\\store.js":"15","H:\\ANKIT_ASSESSMENT\\assesment\\src\\reducers\\userReducers.js":"16","H:\\ANKIT_ASSESSMENT\\assesment\\src\\constants\\userConstants.js":"17","H:\\ANKIT_ASSESSMENT\\assesment\\src\\actions\\userActions.js":"18","H:\\ANKIT_ASSESSMENT\\assesment\\src\\actions\\productActions.js":"19","H:\\ANKIT_ASSESSMENT\\assesment\\src\\reducers\\productReducers.js":"20","H:\\ANKIT_ASSESSMENT\\assesment\\src\\constants\\productConstants.js":"21","H:\\ANKIT_ASSESSMENT\\assesment\\src\\components\\Table2.js":"22"},{"size":604,"mtime":1607443195673,"results":"23","hashOfConfig":"24"},{"size":860,"mtime":1607436156970,"results":"25","hashOfConfig":"24"},{"size":233,"mtime":1607443129106,"results":"26","hashOfConfig":"24"},{"size":4098,"mtime":1607445009486,"results":"27","hashOfConfig":"24"},{"size":174,"mtime":1607453305876,"results":"28","hashOfConfig":"24"},{"size":5033,"mtime":1607427862714,"results":"29","hashOfConfig":"24"},{"size":248,"mtime":1607356093266,"results":"30","hashOfConfig":"24"},{"size":1094,"mtime":1607454188078,"results":"31","hashOfConfig":"24"},{"size":248,"mtime":1607356112241,"results":"32","hashOfConfig":"24"},{"size":257,"mtime":1607356191106,"results":"33","hashOfConfig":"24"},{"size":242,"mtime":1607356180747,"results":"34","hashOfConfig":"24"},{"size":6924,"mtime":1607444842648,"results":"35","hashOfConfig":"24"},{"size":1277,"mtime":1607360290613,"results":"36","hashOfConfig":"24"},{"size":195,"mtime":1607356965073,"results":"37","hashOfConfig":"24"},{"size":809,"mtime":1607365827587,"results":"38","hashOfConfig":"24"},{"size":539,"mtime":1607362478551,"results":"39","hashOfConfig":"24"},{"size":208,"mtime":1607362060230,"results":"40","hashOfConfig":"24"},{"size":1039,"mtime":1607402232261,"results":"41","hashOfConfig":"24"},{"size":1056,"mtime":1607454169256,"results":"42","hashOfConfig":"24"},{"size":766,"mtime":1607454172245,"results":"43","hashOfConfig":"24"},{"size":181,"mtime":1607365924274,"results":"44","hashOfConfig":"24"},{"size":8159,"mtime":1607454182980,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1y9oyko",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"50"},"H:\\ANKIT_ASSESSMENT\\assesment\\src\\index.js",[],"H:\\ANKIT_ASSESSMENT\\assesment\\src\\theme.js",[],["96","97"],"H:\\ANKIT_ASSESSMENT\\assesment\\src\\App.js",[],"H:\\ANKIT_ASSESSMENT\\assesment\\src\\style.js",[],"H:\\ANKIT_ASSESSMENT\\assesment\\src\\components\\Table.js",["98"],"H:\\ANKIT_ASSESSMENT\\assesment\\src\\views\\LoginView.js",["99","100"],"import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLoginPageStyles } from '../style';\r\nimport {\r\n  Typography,\r\n  Grid,\r\n  InputAdornment,\r\n  FormControlLabel,\r\n  Checkbox,\r\n} from '@material-ui/core';\r\nimport { Card, Button } from '@material-ui/core';\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport logo from '../images/logo.png';\r\nimport { login } from '../actions/userActions';\r\n\r\nconst LoginView = () => {\r\n  const classes = useLoginPageStyles();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const dispatch = useDispatch();\r\n\r\n  const [username, setUsername] = useState('5252');\r\n  const [password, setPassword] = useState('admin');\r\n  const [showPassword, setPasswordVisibility] = useState(false);\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { loading, error, userInfo } = userLogin;\r\n  const redirect = location.search ? location.search.split('=')[1] : '/dashboard';\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      navigate(redirect);\r\n    }\r\n  }, [navigate, userInfo, redirect]);\r\n\r\n  function togglePasswordVisibility() {\r\n    setPasswordVisibility((prev) => !prev);\r\n  }\r\n  function handleEmailChange(e) {\r\n    setUsername(e.target.value);\r\n  }\r\n  function handlePasswordChange(e) {\r\n    setPassword(e.target.value);\r\n  }\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    dispatch(login(username, password));\r\n  }\r\n  return (\r\n    <>\r\n      <section className={classes.section}>\r\n        <article>\r\n          <Card className={classes.card}>\r\n            <img src={logo} alt={logo} style={{ width: '250px' }} />\r\n\r\n            <ValidatorForm onSubmit={handleSubmit}>\r\n              <Grid container spacing={1} alignItems='flex-end'>\r\n                <Grid item>\r\n                  <EmailIcon />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextValidator\r\n                    id='input-with-icon-grid'\r\n                    label='Email'\r\n                    value={username}\r\n                    className={classes.textField}\r\n                    autoComplete='off'\r\n                    onChange={handleEmailChange}\r\n                    validators={['required']}\r\n                    errorMessages={['Email is required']}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n              <Grid container spacing={1} alignItems='flex-end'>\r\n                <Grid item>\r\n                  <LockIcon />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextValidator\r\n                    label='Password'\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment>\r\n                          <Button onClick={togglePasswordVisibility}>\r\n                            {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                          </Button>\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    type={showPassword ? 'text' : 'password'}\r\n                    margin='dense'\r\n                    autoComplete='off'\r\n                    className={classes.textField}\r\n                    onChange={handlePasswordChange}\r\n                    value={password}\r\n                    validators={['required']}\r\n                    errorMessages={['Password is required']}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n              <Grid container spacing={2} alignItems='center'>\r\n                <Grid item>\r\n                  <FormControlLabel\r\n                    value='end'\r\n                    control={<Checkbox color='primary' />}\r\n                    label='Secure Login'\r\n                    labelPlacement='end'\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <Link className={classes.forgotPassword} to='/forgotpassword'>\r\n                    Forgot Password\r\n                  </Link>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Button\r\n                className={classes.button}\r\n                variant='contained'\r\n                color='primary'\r\n                size='small'\r\n                type='submit'>\r\n                Login\r\n              </Button>\r\n            </ValidatorForm>\r\n            <Typography\r\n              variant='caption'\r\n              display='block'\r\n              gutterBottom\r\n              className={classes.typography}>\r\n              Copyright © Spacecode SAS. 2020 All rights reserved.\r\n            </Typography>\r\n          </Card>\r\n        </article>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginView;\r\n","H:\\ANKIT_ASSESSMENT\\assesment\\src\\views\\DashboardView.js",[],"H:\\ANKIT_ASSESSMENT\\assesment\\src\\views\\InventoryView.js",[],"H:\\ANKIT_ASSESSMENT\\assesment\\src\\views\\CustomersView.js",[],"H:\\ANKIT_ASSESSMENT\\assesment\\src\\views\\TransactionsView.js",[],"H:\\ANKIT_ASSESSMENT\\assesment\\src\\views\\ReportsView.js",[],"H:\\ANKIT_ASSESSMENT\\assesment\\src\\layouts\\DashboardLayout.js",["101"],"import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { Outlet, useLocation, useNavigate } from 'react-router-dom';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport LineStyleIcon from '@material-ui/icons/LineStyle';\r\nimport ReceiptIcon from '@material-ui/icons/Receipt';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport PaletteIcon from '@material-ui/icons/Palette';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport { useSidebarStyles } from '../style';\r\nimport logo2 from '../images/logo2.png';\r\n\r\nconst DashboardLayout = () => {\r\n  const classes = useSidebarStyles();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const [open, setOpen] = useState(false);\r\n  const [path, setPath] = useState('');\r\n  const [title, setTitle] = useState('Dashboard');\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [color, setColor] = useState('#000');\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const options = [\r\n    {\r\n      name: 'Dashboard',\r\n      icon: <DashboardIcon />,\r\n      path: '/dashboard',\r\n      onClick: () => {\r\n        navigate('/dashboard');\r\n        setTitle('Dashboard');\r\n      },\r\n    },\r\n    {\r\n      name: 'Inventory',\r\n      icon: <LineStyleIcon />,\r\n      path: '/inventory',\r\n      onClick: () => {\r\n        navigate('/inventory');\r\n        setTitle('Inventory');\r\n      },\r\n    },\r\n    {\r\n      name: 'Transactions',\r\n      icon: <ReceiptIcon />,\r\n      path: '/transactions',\r\n      onClick: () => {\r\n        navigate('/transactions');\r\n        setTitle('Transactions');\r\n      },\r\n    },\r\n    {\r\n      name: 'Customers',\r\n      icon: <PeopleIcon />,\r\n      path: '/customers',\r\n      onClick: () => {\r\n        navigate('/customers');\r\n        setTitle('Customers');\r\n      },\r\n    },\r\n    {\r\n      name: 'Reports',\r\n      icon: <BarChartIcon />,\r\n      path: '/reports',\r\n      onClick: () => {\r\n        navigate('/reports');\r\n        setTitle('Reports');\r\n      },\r\n    },\r\n  ];\r\n  React.useEffect(() => {\r\n    setPath(location.pathname);\r\n  }, [location, setPath]);\r\n\r\n  const activeRoute = (route) => {\r\n    return route === path;\r\n  };\r\n\r\n  const colors = [\r\n    {\r\n      class: classes.red,\r\n      onClick: () => {\r\n        handleClose();\r\n        setColor(classes.red);\r\n      },\r\n    },\r\n    {\r\n      class: classes.green,\r\n      onClick: () => {\r\n        handleClose();\r\n        setColor(classes.green);\r\n      },\r\n    },\r\n    {\r\n      class: classes.pink,\r\n      onClick: () => {\r\n        handleClose();\r\n        setColor(classes.pink);\r\n      },\r\n    },\r\n    {\r\n      class: classes.indigo,\r\n      onClick: () => {\r\n        handleClose();\r\n        setColor(classes.indigo);\r\n      },\r\n    },\r\n    {\r\n      class: classes.purple,\r\n      onClick: () => {\r\n        handleClose();\r\n        setColor(classes.purple);\r\n      },\r\n    },\r\n  ];\r\n\r\n  const drawer = (\r\n    <>\r\n      <div className={classes.toolbar} style={{ backgroundColor: '#a31545' }}>\r\n        <img\r\n          src={logo2}\r\n          alt='logo'\r\n          style={{ width: '80%', marginRight: '1.5rem' }}\r\n          onClick={handleDrawerClose}\r\n        />\r\n      </div>\r\n      <Divider />\r\n      <List>\r\n        {options.map((option, index) => {\r\n          const { icon, name, onClick } = option;\r\n          return (\r\n            <ListItem\r\n              button\r\n              key={index}\r\n              onClick={onClick}\r\n              selected={activeRoute(option.path)}\r\n              classes={{\r\n                selected: classes.listItemSelected,\r\n                button: classes.listItemButton,\r\n              }}>\r\n              <ListItemIcon className={classes.listIcons}>{icon}</ListItemIcon>\r\n              <ListItemText primary={name} />\r\n            </ListItem>\r\n          );\r\n        })}\r\n        <ListItem\r\n          aria-controls='simple-menu'\r\n          aria-haspopup='true'\r\n          onClick={handleClick}>\r\n          <ListItemIcon className={classes.listIcons}>\r\n            <PaletteIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary={'Color Pallete'} />\r\n        </ListItem>\r\n\r\n        <Menu\r\n          id='simple-menu'\r\n          anchorEl={anchorEl}\r\n          keepMounted\r\n          open={Boolean(anchorEl)}\r\n          onClose={handleClose}>\r\n          {colors.map((clr) => (\r\n            <MenuItem onClick={clr.onClick}>\r\n              <span className={clr.class}></span>\r\n            </MenuItem>\r\n          ))}\r\n        </Menu>\r\n      </List>\r\n    </>\r\n  );\r\n  return (\r\n    <>\r\n      <div className={classes.root}>\r\n        <AppBar\r\n          position='fixed'\r\n          className={clsx(classes.appBar, {\r\n            [classes.appBarShift]: open,\r\n          })}>\r\n          <MainToolbar\r\n            title={title}\r\n            open={open}\r\n            handleDrawerOpen={handleDrawerOpen}\r\n          />\r\n        </AppBar>\r\n        <Drawer\r\n          variant='permanent'\r\n          className={clsx(classes.drawer, {\r\n            [classes.drawerOpen]: open,\r\n            [classes.drawerClose]: !open,\r\n          })}\r\n          classes={{\r\n            paper: clsx({\r\n              [classes.drawerOpen]: open,\r\n              [classes.drawerClose]: !open,\r\n            }),\r\n          }}>\r\n          {drawer}\r\n        </Drawer>\r\n\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n          <Outlet />\r\n        </main>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nconst MainToolbar = ({ title, handleDrawerOpen, open }) => {\r\n  const classes = useSidebarStyles();\r\n  return (\r\n    <Toolbar>\r\n      <IconButton\r\n        color='inherit'\r\n        aria-label='open drawer'\r\n        onClick={handleDrawerOpen}\r\n        edge='start'\r\n        className={clsx(classes.menuButton, {\r\n          [classes.hide]: open,\r\n        })}>\r\n        <MenuIcon className={classes.menuIcon} />\r\n      </IconButton>\r\n      <Typography variant='h6' noWrap className={classes.typography}>\r\n        {title}\r\n      </Typography>\r\n    </Toolbar>\r\n  );\r\n};\r\nexport default DashboardLayout;\r\n","H:\\ANKIT_ASSESSMENT\\assesment\\src\\routes.js",[],"H:\\ANKIT_ASSESSMENT\\assesment\\src\\layouts\\MainLayout.js",[],"H:\\ANKIT_ASSESSMENT\\assesment\\src\\store.js",["102"],"import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport { userLoginReducer } from './reducers/userReducers';\r\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers';\r\n\r\nconst reducer = combineReducers({\r\n  userLogin: userLoginReducer,\r\n  productList: productListReducer,\r\n});\r\n\r\nconst userInfoFromStorage = localStorage.getItem('userInfo')\r\n  ? JSON.parse(localStorage.getItem('userInfo'))\r\n  : null;\r\n\r\nconst initialState = {\r\n  userLogin: { userInfo: userInfoFromStorage },\r\n};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;","H:\\ANKIT_ASSESSMENT\\assesment\\src\\reducers\\userReducers.js",[],"H:\\ANKIT_ASSESSMENT\\assesment\\src\\constants\\userConstants.js",[],"H:\\ANKIT_ASSESSMENT\\assesment\\src\\actions\\userActions.js",[],"H:\\ANKIT_ASSESSMENT\\assesment\\src\\actions\\productActions.js",["103"],"import axios from 'axios';\r\nimport {\r\n  PRODUCT_LIST_REQUEST,\r\n  PRODUCT_LIST_SUCCESS,\r\n  PRODUCT_LIST_FAIL,\r\n} from '../constants/productConstants';\r\nimport { logout } from './userActions';\r\n\r\nexport const listProducts = (pageNumber, limit) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  try {\r\n    dispatch({ type: PRODUCT_LIST_REQUEST });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'x-web-token': userInfo.data.web_token[0],\r\n      },\r\n    };\r\n    const { data } = await axios.get(\r\n      `https://d.jeweltrace.in/sku?id=5cfe1974a24ac0157013f843&rootInfo=company&page_no=${pageNumber}&limit=${limit}`,\r\n      config\r\n    );\r\n    dispatch({\r\n      type: PRODUCT_LIST_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: PRODUCT_LIST_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n","H:\\ANKIT_ASSESSMENT\\assesment\\src\\reducers\\productReducers.js",[],"H:\\ANKIT_ASSESSMENT\\assesment\\src\\constants\\productConstants.js",[],"H:\\ANKIT_ASSESSMENT\\assesment\\src\\components\\Table2.js",["104","105","106","107"],"import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport { TableHead } from '@material-ui/core';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Moment from 'react-moment';\r\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport { listProducts } from '../actions/productActions';\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n    width: '100%',\r\n  },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n  const handleFirstPageButtonClick = (event) => {\r\n    onChangePage(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = (event) => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (event) => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = (event) => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label='first page'>\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleBackButtonClick}\r\n        disabled={page === 0}\r\n        aria-label='previous page'>\r\n        {theme.direction === 'rtl' ? (\r\n          <KeyboardArrowRight />\r\n        ) : (\r\n          <KeyboardArrowLeft />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label='next page'>\r\n        {theme.direction === 'rtl' ? (\r\n          <KeyboardArrowLeft />\r\n        ) : (\r\n          <KeyboardArrowRight />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label='last page'>\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles2 = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  tableHeader: {\r\n    backgroundColor: '#FDA7DF',\r\n  },\r\n  tableCell: {\r\n    fontWeight: 'bold',\r\n  },\r\n  iconColor: {\r\n    color: '#6F6F6F',\r\n    fontSize: 'medium',\r\n  },\r\n});\r\n\r\nfunction InventoryTable() {\r\n  const classes = useStyles2();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  const productList = useSelector((state) => state.productList);\r\n  const {\r\n    loading,\r\n    error,\r\n    products,\r\n    pages,\r\n    currentPage,\r\n    nextPage,\r\n  } = productList;\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      dispatch(listProducts(page, rowsPerPage));\r\n    } else {\r\n      navigate('/login');\r\n    }\r\n  }, [dispatch, navigate, userInfo, page, rowsPerPage]);\r\n\r\n  const emptyRows =\r\n    rowsPerPage - Math.min(rowsPerPage, products.length - page * rowsPerPage);\r\n\r\n  const handleChangePage = (event, nextPage) => {\r\n    setPage(nextPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value));\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label='custom pagination table'>\r\n        <TableHead className={classes.tableHeader}>\r\n          <TableRow>\r\n            <TableCell className={classes.tableCell} align='left'>\r\n              SKU\r\n            </TableCell>\r\n            <TableCell className={classes.tableCell} align='left'>\r\n              Design Code\r\n            </TableCell>\r\n            <TableCell className={classes.tableCell} align='left'>\r\n              Material\r\n            </TableCell>\r\n            <TableCell className={classes.tableCell} align='left'>\r\n              Design Category\r\n            </TableCell>\r\n            <TableCell className={classes.tableCell} align='left'>\r\n              Diamond Ct.\r\n            </TableCell>\r\n            <TableCell className={classes.tableCell} align='left'>\r\n              Net Weight\r\n            </TableCell>\r\n            <TableCell className={classes.tableCell} align='left'>\r\n              Price\r\n            </TableCell>\r\n            <TableCell className={classes.tableCell} align='left'>\r\n              SKU Qty\r\n            </TableCell>\r\n            <TableCell className={classes.tableCell} align='left'>\r\n              Date\r\n            </TableCell>\r\n            <TableCell className={classes.tableCell} align='left'>\r\n              Action\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {products.map((row) => (\r\n            <TableRow key={row.design_code}>\r\n              <TableCell align='left'>{row.sku_number}</TableCell>\r\n              <TableCell align='left'>{row.design_code}</TableCell>\r\n              <TableCell align='left'>{row.metal_type}</TableCell>\r\n              <TableCell align='left'>{row.design_category}</TableCell>\r\n              <TableCell align='left'>{row.diamond_weight}</TableCell>\r\n              <TableCell align='left'>{row.net_weight}</TableCell>\r\n              <TableCell align='left'>{row.sales_value}</TableCell>\r\n              <TableCell align='left'>{row.sku_quantity}</TableCell>\r\n              <TableCell align='left'>\r\n                <Moment format='DD-MM-YYYY'>{row.createdAt}</Moment>\r\n              </TableCell>\r\n              <TableCell align='left'>\r\n                <VisibilityIcon className={classes.iconColor} />{' '}\r\n                <PictureAsPdfIcon className={classes.iconColor} />\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n\r\n        {emptyRows > 0 && (\r\n          <TableRow style={{ height: 53 * emptyRows }}>\r\n            <TableCell colSpan={6} />\r\n          </TableRow>\r\n        )}\r\n        <TableFooter>\r\n          <TableRow>\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\r\n              colSpan={3}\r\n              count={pages * rowsPerPage}\r\n              rowsPerPage={rowsPerPage}\r\n              page={currentPage}\r\n              SelectProps={{\r\n                inputProps: { 'aria-label': 'rows per page' },\r\n                native: true,\r\n              }}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              ActionsComponent={TablePaginationActions}\r\n            />\r\n          </TableRow>\r\n        </TableFooter>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\nexport default InventoryTable;\r\n",{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":2,"column":8,"nodeType":"114","messageId":"115","endLine":2,"endColumn":21},{"ruleId":"112","severity":1,"message":"116","line":32,"column":11,"nodeType":"114","messageId":"115","endLine":32,"endColumn":18},{"ruleId":"112","severity":1,"message":"117","line":32,"column":20,"nodeType":"114","messageId":"115","endLine":32,"endColumn":25},{"ruleId":"112","severity":1,"message":"118","line":35,"column":10,"nodeType":"114","messageId":"115","endLine":35,"endColumn":15},{"ruleId":"112","severity":1,"message":"119","line":6,"column":30,"nodeType":"114","messageId":"115","endLine":6,"endColumn":51},{"ruleId":"112","severity":1,"message":"120","line":7,"column":10,"nodeType":"114","messageId":"115","endLine":7,"endColumn":16},{"ruleId":"112","severity":1,"message":"121","line":20,"column":8,"nodeType":"114","messageId":"115","endLine":20,"endColumn":24},{"ruleId":"112","severity":1,"message":"116","line":129,"column":5,"nodeType":"114","messageId":"115","endLine":129,"endColumn":12},{"ruleId":"112","severity":1,"message":"117","line":130,"column":5,"nodeType":"114","messageId":"115","endLine":130,"endColumn":10},{"ruleId":"112","severity":1,"message":"122","line":134,"column":5,"nodeType":"114","messageId":"115","endLine":134,"endColumn":13},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"no-unused-vars","'MaterialTable' is defined but never used.","Identifier","unusedVar","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'color' is assigned a value but never used.","'productDetailsReducer' is defined but never used.","'logout' is defined but never used.","'CircularProgress' is defined but never used.","'nextPage' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]